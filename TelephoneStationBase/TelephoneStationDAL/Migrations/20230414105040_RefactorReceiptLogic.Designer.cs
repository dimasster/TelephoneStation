// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelephoneStationDAL;

#nullable disable

namespace TelephoneStationDAL.Migrations
{
    [DbContext(typeof(TelephoneStationDbContext))]
    [Migration("20230414105040_RefactorReceiptLogic")]
    partial class RefactorReceiptLogic
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TelephoneStationDAL.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "user1",
                            Password = "password",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Login = "user2",
                            Password = "password",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Login = "user3",
                            Password = "password",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Login = "user4",
                            Password = "password",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Login = "user5",
                            Password = "password",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Login = "admin",
                            Password = "password",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.Call", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CallStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CallTime")
                        .HasColumnType("int");

                    b.Property<int>("CallerId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CallerId");

                    b.HasIndex("TargetId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBought")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ReceiptType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Receipt");

                    b.HasDiscriminator<string>("ReceiptType").HasValue("Receipt");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.SavedUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TargetId");

                    b.HasIndex("TargetId");

                    b.ToTable("SavedUsers");
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostPerMinute")
                        .HasColumnType("money");

                    b.Property<int>("FreeMinutes")
                        .HasColumnType("int");

                    b.Property<decimal>("SubscriptionCost")
                        .HasColumnType("money");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CostPerMinute = 0.1m,
                            FreeMinutes = 0,
                            SubscriptionCost = 9.99m,
                            Title = "Service 1"
                        },
                        new
                        {
                            Id = 2,
                            CostPerMinute = 0.05m,
                            FreeMinutes = 0,
                            SubscriptionCost = 14.99m,
                            Title = "Service 2"
                        },
                        new
                        {
                            Id = 3,
                            CostPerMinute = 0.2m,
                            FreeMinutes = 0,
                            SubscriptionCost = 19.99m,
                            Title = "Service 3"
                        },
                        new
                        {
                            Id = 4,
                            CostPerMinute = 0.15m,
                            FreeMinutes = 0,
                            SubscriptionCost = 24.99m,
                            Title = "Service 4"
                        },
                        new
                        {
                            Id = 5,
                            CostPerMinute = 0.25m,
                            FreeMinutes = 0,
                            SubscriptionCost = 29.99m,
                            Title = "Service 5"
                        });
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MinuteOfUsage")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubscriptionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubscriptionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Ballance")
                        .HasColumnType("float");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ballance = 0.0,
                            IsBanned = false,
                            Name = "John",
                            PhoneNumber = 123456789,
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Ballance = 0.0,
                            IsBanned = false,
                            LastName = "Smith",
                            Name = "Sarah",
                            PhoneNumber = 234567890,
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            Ballance = 0.0,
                            IsBanned = false,
                            Name = "Alex",
                            PhoneNumber = 345678901,
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            Ballance = 0.0,
                            IsBanned = false,
                            Name = "Mike",
                            PhoneNumber = 456789012,
                            Role = 1
                        },
                        new
                        {
                            Id = 5,
                            Ballance = 0.0,
                            IsBanned = false,
                            Name = "Emily",
                            PhoneNumber = 567890123,
                            Role = 1
                        },
                        new
                        {
                            Id = 6,
                            Ballance = 0.0,
                            IsBanned = false,
                            Name = "Admin",
                            PhoneNumber = 678901234,
                            Role = 2
                        });
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.CallReceipt", b =>
                {
                    b.HasBaseType("TelephoneStationDAL.Entities.Receipt");

                    b.Property<int>("CallId")
                        .HasColumnType("int");

                    b.HasIndex("CallId")
                        .IsUnique()
                        .HasFilter("[CallId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("CallReceipt");
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.SubscriptionReceipt", b =>
                {
                    b.HasBaseType("TelephoneStationDAL.Entities.Receipt");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasIndex("SubscriptionId")
                        .IsUnique()
                        .HasFilter("[SubscriptionId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("SubscriptionReceipt");
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.Account", b =>
                {
                    b.HasOne("TelephoneStationDAL.Entities.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("TelephoneStationDAL.Entities.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.Call", b =>
                {
                    b.HasOne("TelephoneStationDAL.Entities.User", "Caller")
                        .WithMany("Calls")
                        .HasForeignKey("CallerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TelephoneStationDAL.Entities.User", "Target")
                        .WithMany("Callers")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Caller");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.Receipt", b =>
                {
                    b.HasOne("TelephoneStationDAL.Entities.User", "User")
                        .WithMany("Receipts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.SavedUser", b =>
                {
                    b.HasOne("TelephoneStationDAL.Entities.User", "Target")
                        .WithMany("Contacters")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TelephoneStationDAL.Entities.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Target");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.Subscription", b =>
                {
                    b.HasOne("TelephoneStationDAL.Entities.Service", "Service")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelephoneStationDAL.Entities.User", "User")
                        .WithOne("Subscription")
                        .HasForeignKey("TelephoneStationDAL.Entities.Subscription", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.CallReceipt", b =>
                {
                    b.HasOne("TelephoneStationDAL.Entities.Call", "Call")
                        .WithOne("Receipt")
                        .HasForeignKey("TelephoneStationDAL.Entities.CallReceipt", "CallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Call");
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.SubscriptionReceipt", b =>
                {
                    b.HasOne("TelephoneStationDAL.Entities.Subscription", "Subscription")
                        .WithOne("Receipt")
                        .HasForeignKey("TelephoneStationDAL.Entities.SubscriptionReceipt", "SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.Call", b =>
                {
                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.Service", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.Subscription", b =>
                {
                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("TelephoneStationDAL.Entities.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Callers");

                    b.Navigation("Calls");

                    b.Navigation("Contacters");

                    b.Navigation("Contacts");

                    b.Navigation("Receipts");

                    b.Navigation("Subscription");
                });
#pragma warning restore 612, 618
        }
    }
}
